package main

import (
	"fmt"
	"io"
	"net/http"
	"os"
)

func main() {
	http.HandleFunc("/api/discount/coupon", getDiscountCoupon)
	http.HandleFunc("/api/hr/data", getEmployeeData)
	http.ListenAndServe(":8080", nil)
}

func getDiscountCoupon(w http.ResponseWriter, r *http.Request) {
	// Get the filename parameter from the request query
	filename := r.URL.Query().Get("filename")

	// If filename is empty, return a bad request error
	if filename == "" {
		http.Error(w, "Filename parameter is required", http.StatusBadRequest)
		return
	}

	// Pass the filename to the helper function to load the file
	content, err := loadFileAsString(filename)
	if err != nil {
		http.Error(w, fmt.Sprintf("Error loading file: %s", err.Error()), http.StatusInternalServerError)
		return
	}

	// Write the file content in the response
	w.Header().Set("Content-Type", "text/plain")
	w.Write([]byte(content))
}

func loadFileAsString(filename string) (string, error) {
	// Read the file content
	content, err := os.ReadFile(filename)
	if err != nil {
		return "", err
	}
	return string(content), nil
}

func getEmployeeData(w http.ResponseWriter, r *http.Request) {
	// Parse URL parameter
	id := r.URL.Query().Get("id")

	// Bail if no parameter
	if id == "" {
		http.Error(w, "ID parameter is required", http.StatusNotFound)
		return
	}

	// Go get it
	data, err := getData(id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Error getting data: %s", err.Error()), http.StatusNotFound)
		return
	}

	// Write the response
	fmt.Fprint(w, data)
}

func getData(url string) (string, error) {
	// Make a GET request to the URL
	resp, err := http.Get(url)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}
	return string(body), nil
}
